// Enhanced Medical Platform Launcher\n// Integrates all advanced AI and educational modules for your geriatrics fellowship\n\n// Initialize enhanced system with your API keys\nif (typeof window !== 'undefined') {\n  console.log('🏥 Initializing Enhanced Shaare Zedek Geriatrics Platform...');\n  \n  // Configuration check\n  const config = {\n    ai: {\n      claude: !!(window.localStorage.getItem('CLAUDE_API_KEY') || process.env?.CLAUDE_API_KEY),\n      openai: !!(window.localStorage.getItem('OPENAI_API_KEY') || process.env?.OPENAI_API_KEY),\n      gemini: !!(window.localStorage.getItem('GEMINI_API_KEY') || process.env?.GEMINI_API_KEY)\n    },\n    features: {\n      multiAI: true,\n      israeliContext: true,\n      fellowshipTracking: true,\n      educationalMode: true\n    }\n  };\n  \n  // Enhanced integration\n  window.EnhancedPlatform = {\n    // Multi-AI educational case generation\n    async generateAdvancedCase(topic, difficulty = 'fellowship') {\n      if (window.MedicalAIOrchestrator) {\n        return await window.MedicalAIOrchestrator.unleashFullEducationalPower(\n          `Generate comprehensive ${topic} case for Israeli geriatrics fellowship`,\n          { \n            fellowshipLevel: difficulty,\n            israeliContext: true,\n            competencyFocus: topic\n          }\n        );\n      }\n      return { fallback: `Educational ${topic} case framework for fellowship training` };\n    },\n    \n    // Advanced syndrome analysis\n    async analyzeGeriatricSyndromes(patientData) {\n      if (window.GeriatricSyndromeMastery) {\n        return await window.GeriatricSyndromeMastery.comprehensiveAssessment(\n          patientData,\n          { \n            fellowshipLevel: 'advanced',\n            israeliContext: true,\n            educationalPurpose: true\n          }\n        );\n      }\n      return { fallback: 'Standard geriatric assessment approach' };\n    },\n    \n    // Israeli healthcare navigation\n    async navigateIsraeliSystem(scenario) {\n      if (window.IsraeliHealthcareEducation) {\n        return window.IsraeliHealthcareEducation.generateKupahNavigationExercise(scenario);\n      }\n      return { fallback: 'Standard Israeli healthcare guidance' };\n    },\n    \n    // Fellowship progress tracking\n    async trackFellowshipProgress(fellowId, assessmentData) {\n      if (window.GeriatricsFellowship) {\n        return window.GeriatricsFellowship.trackFellowProgress(fellowId, assessmentData);\n      }\n      return { fallback: 'Basic progress tracking' };\n    },\n    \n    // Comprehensive platform status\n    getSystemStatus() {\n      return {\n        timestamp: new Date().toISOString(),\n        modules: {\n          aiOrchestrator: !!window.MedicalAIOrchestrator,\n          syndromeAnalysis: !!window.GeriatricSyndromeMastery,\n          israeliEducation: !!window.IsraeliHealthcareEducation,\n          fellowship: !!window.GeriatricsFellowship,\n          calculators: !!window.clinicalCalc,\n          safeMedicalAI: !!window.SafeMedicalAI\n        },\n        features: {\n          multiAIConsensus: config.ai.claude && config.ai.openai,\n          advancedSyndromeAnalysis: !!window.GeriatricSyndromeMastery,\n          israeliHealthcareIntegration: !!window.IsraeliHealthcareEducation,\n          fellowshipCompetencyTracking: !!window.GeriatricsFellowship,\n          educationalSafetyConstraints: !!window.SafeMedicalAI\n        },\n        aiModels: {\n          claude: config.ai.claude ? 'Ready' : 'Not configured',\n          openai: config.ai.openai ? 'Ready' : 'Not configured', \n          gemini: config.ai.gemini ? 'Ready' : 'Not configured'\n        },\n        readiness: 'Enhanced medical education platform ready for fellowship use',\n        disclaimer: 'All enhanced features maintain strict educational boundaries and safety constraints'\n      };\n    }\n  };\n  \n  // Auto-initialize enhanced modules\n  setTimeout(() => {\n    // Connect AI orchestrator to syndrome analysis\n    if (window.MedicalAIOrchestrator && window.GeriatricSyndromeMastery) {\n      window.GeriatricSyndromeMastery.setAIOrchestrator(window.MedicalAIOrchestrator);\n      console.log('🔗 AI orchestrator connected to syndrome analysis');\n    }\n    \n    // Display system status\n    const status = window.EnhancedPlatform.getSystemStatus();\n    console.log('🚀 Enhanced Platform Status:', status);\n    \n    console.log('✅ Enhanced Geriatrics Platform Ready!');\n    console.log('📖 Available Methods:');\n    console.log('   - EnhancedPlatform.generateAdvancedCase(topic, difficulty)');\n    console.log('   - EnhancedPlatform.analyzeGeriatricSyndromes(patientData)');\n    console.log('   - EnhancedPlatform.navigateIsraeliSystem(scenario)');\n    console.log('   - EnhancedPlatform.trackFellowshipProgress(fellowId, data)');\n    console.log('   - EnhancedPlatform.getSystemStatus()');\n    \n  }, 2000);\n  \n} else {\n  console.log('Enhanced platform launcher loaded for Node.js environment');\n}\n\n// Quick test function\nwindow.testEnhancedPlatform = async function() {\n  console.log('🧪 Testing Enhanced Platform...');\n  \n  try {\n    // Test case generation\n    const testCase = await window.EnhancedPlatform.generateAdvancedCase('delirium', 'advanced');\n    console.log('✅ Case generation:', testCase.content ? 'Working' : 'Fallback mode');\n    \n    // Test syndrome analysis\n    const testPatient = {\n      age: 82,\n      name: 'Test Patient',\n      conditions: ['dementia', 'hypertension'],\n      medications: ['donepezil', 'amlodipine']\n    };\n    \n    const syndromeAnalysis = await window.EnhancedPlatform.analyzeGeriatricSyndromes(testPatient);\n    console.log('✅ Syndrome analysis:', syndromeAnalysis.enhanced ? 'Working' : 'Fallback mode');\n    \n    // Test system status\n    const status = window.EnhancedPlatform.getSystemStatus();\n    console.log('✅ System status:', status.readiness);\n    \n    console.log('🎉 Enhanced platform test complete!');\n    \n  } catch (error) {\n    console.warn('⚠️ Enhanced platform test encountered issues:', error.message);\n    console.log('📚 Platform will operate in fallback mode with core functionality');\n  }\n};\n\nconsole.log('🚀 Enhanced Medical Platform Launcher loaded');\nconsole.log('Run testEnhancedPlatform() to verify all systems');