name: Lighthouse Performance CI

on:
  push:
    branches: [fellowship-ready, main]
  pull_request:
    branches: [fellowship-ready, main]
  schedule:
    - cron: '0 6 * * 1' # Weekly on Monday at 6 AM

jobs:
  lighthouse:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm install --legacy-peer-deps || true
        
      - name: Build application
        run: echo "Static site - no build needed"
        
      - name: Run Lighthouse CI
        uses: treosh/lighthouse-ci-action@v10
        with:
          urls: |
            https://geriatrics-study.netlify.app/
            https://geriatrics-platform.netlify.app/
          uploadArtifacts: true
          temporaryPublicStorage: true
          configPath: './lighthouserc.json'
          
      - name: Save Lighthouse results
        uses: actions/upload-artifact@v4
        with:
          name: lighthouse-results
          path: '.lighthouseci'
          
      - name: Comment PR with Lighthouse results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const results = JSON.parse(fs.readFileSync('.lighthouseci/lhr-1.json', 'utf8'));
            
            const scores = {
              performance: Math.round(results.categories.performance.score * 100),
              accessibility: Math.round(results.categories.accessibility.score * 100),
              'best-practices': Math.round(results.categories['best-practices'].score * 100),
              seo: Math.round(results.categories.seo.score * 100),
              pwa: results.categories.pwa ? Math.round(results.categories.pwa.score * 100) : 'N/A'
            };
            
            const getEmoji = (score) => {
              if (score >= 90) return '🟢';
              if (score >= 50) return '🟡';
              return '🔴';
            };
            
            const comment = `## 🚀 Lighthouse Performance Report
            
            | Category | Score | Status |
            |----------|-------|--------|
            | Performance | ${scores.performance}% | ${getEmoji(scores.performance)} |
            | Accessibility | ${scores.accessibility}% | ${getEmoji(scores.accessibility)} |
            | Best Practices | ${scores['best-practices']}% | ${getEmoji(scores['best-practices'])} |
            | SEO | ${scores.seo}% | ${getEmoji(scores.seo)} |
            | PWA | ${scores.pwa}% | ${scores.pwa !== 'N/A' ? getEmoji(scores.pwa) : 'N/A'} |
            
            [View full report](${results.finalUrl})`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
            
  lighthouse-budget:
    runs-on: ubuntu-latest
    needs: lighthouse
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Download Lighthouse results
        uses: actions/download-artifact@v3
        with:
          name: lighthouse-results
          path: '.lighthouseci'
          
      - name: Assert performance budget
        run: |
          node -e "
          const fs = require('fs');
          const results = JSON.parse(fs.readFileSync('.lighthouseci/lhr-1.json', 'utf8'));
          
          const budgets = {
            performance: 85,
            accessibility: 90,
            'best-practices': 85,
            seo: 90
          };
          
          let failed = false;
          
          Object.entries(budgets).forEach(([key, minScore]) => {
            const score = Math.round(results.categories[key].score * 100);
            if (score < minScore) {
              console.error(\`❌ \${key} score \${score}% is below budget of \${minScore}%\`);
              failed = true;
            } else {
              console.log(\`✅ \${key} score \${score}% meets budget of \${minScore}%\`);
            }
          });
          
          if (failed) {
            process.exit(1);
          }
          "