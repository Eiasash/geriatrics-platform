// Multi-AI Orchestration System for Enhanced Medical Education
// Coordinates Claude, GPT-4, and Gemini for comprehensive educational content

class MedicalAIOrchestrator {
  constructor() {
    this.models = {
      claude: { 
        endpoint: process.env.CLAUDE_API_KEY ? 'https://api.anthropic.com/v1/messages' : null,
        apiKey: process.env.CLAUDE_API_KEY,
        strengths: ['clinical_reasoning', 'ethical_analysis', 'complex_synthesis'],
        model: 'claude-3-sonnet-20240229'
      },
      openai: { 
        endpoint: process.env.OPENAI_API_KEY ? 'https://api.openai.com/v1/chat/completions' : null,
        apiKey: process.env.OPENAI_API_KEY,
        strengths: ['case_generation', 'educational_content', 'creative_scenarios'],
        model: 'gpt-4'
      },
      gemini: { 
        endpoint: process.env.GEMINI_API_KEY ? 'https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent' : null,
        apiKey: process.env.GEMINI_API_KEY,
        strengths: ['data_analysis', 'multimodal_processing', 'research_synthesis'],
        model: 'gemini-pro'
      }
    };

    this.educationalConstraints = {\n      alwaysEducational: true,\n      requireDisclaimers: true,\n      israeliContext: true,\n      fellowshipFocus: true\n    };\n\n    this.consensusThreshold = parseFloat(process.env.AI_CONSENSUS_THRESHOLD) || 0.75;\n    this.activeModels = this.getActiveModels();\n    \n    console.log(`ðŸ¤– Multi-AI Orchestrator initialized with ${this.activeModels.length} models`);\n  }\n\n  getActiveModels() {\n    return Object.entries(this.models)\n      .filter(([_, config]) => config.endpoint && config.apiKey)\n      .map(([name, _]) => name);\n  }\n\n  async routeQuery(query, type, options = {}) {\n    const routing = {\n      'differential_diagnosis': ['claude', 'openai'],\n      'case_generation': ['openai', 'claude'],\n      'clinical_reasoning': ['claude', 'openai'],\n      'educational_content': ['openai', 'claude'],\n      'israeli_context': ['claude', 'gemini'],\n      'research_synthesis': ['claude', 'gemini'],\n      'fellowship_training': ['claude', 'openai'],\n      'competency_assessment': ['claude', 'openai'],\n      'statistical_analysis': ['gemini', 'claude'],\n      'image_analysis': ['gemini'],\n      'multimodal_assessment': ['gemini']\n    };\n    \n    const preferredModels = routing[type] || ['claude'];\n    const availableModels = preferredModels.filter(model => this.activeModels.includes(model));\n    \n    if (availableModels.length === 0) {\n      console.warn(`No models available for ${type}, using fallback`);\n      return this.generateFallbackResponse(query, type);\n    }\n    \n    return this.queryModels(query, availableModels, options);\n  }\n\n  async unleashFullEducationalPower(educationalQuery, context = {}) {\n    // Hit ALL available models simultaneously for comprehensive educational analysis\n    const enhancedQuery = this.enhanceQueryWithEducationalContext(educationalQuery, context);\n    \n    if (this.activeModels.length === 0) {\n      return this.generateFallbackResponse(educationalQuery, 'educational_comprehensive');\n    }\n\n    console.log(`ðŸš€ Unleashing full AI power: ${this.activeModels.join(', ')}`);\n    \n    const responses = await Promise.allSettled(\n      this.activeModels.map(model => \n        this.querySpecificModel(model, enhancedQuery, context)\n          .catch(err => ({ model, error: err.message, fallback: true }))\n      )\n    );\n    \n    return this.synthesizeEducationalResults(responses, educationalQuery);\n  }\n\n  enhanceQueryWithEducationalContext(query, context) {\n    const educationalFraming = `\nIMPORTANT: This is for medical education and fellowship training purposes only.\n\nContext: Israeli geriatrics fellowship at Shaare Zedek Medical Center\nLearner Level: ${context.fellowshipLevel || 'Intermediate'}\nFocus Areas: ${context.focusAreas?.join(', ') || 'General geriatrics'}\nIsraeli Healthcare: Include relevant Kupah/Bituach Leumi context\n\nEducational Query: ${query}\n\nRequirements:\n- Frame as educational exercise only\n- Include Israeli healthcare system considerations\n- Target fellowship-level learning\n- Provide evidence-based references\n- Include appropriate medical disclaimers\n- Focus on clinical reasoning development\n`;\n    \n    return educationalFraming;\n  }\n\n  async querySpecificModel(modelName, query, context = {}) {\n    const model = this.models[modelName];\n    if (!model || !model.endpoint) {\n      throw new Error(`Model ${modelName} not available`);\n    }\n\n    const systemPrompt = this.generateSystemPrompt(modelName, context);\n    \n    try {\n      let response;\n      switch (modelName) {\n        case 'claude':\n          response = await this.queryClaude(systemPrompt, query);\n          break;\n        case 'openai':\n          response = await this.queryOpenAI(systemPrompt, query);\n          break;\n        case 'gemini':\n          response = await this.queryGemini(systemPrompt, query);\n          break;\n        default:\n          throw new Error(`Unknown model: ${modelName}`);\n      }\n      \n      return {\n        model: modelName,\n        response,\n        strengths: model.strengths,\n        timestamp: new Date().toISOString()\n      };\n      \n    } catch (error) {\n      console.error(`Error querying ${modelName}:`, error.message);\n      throw error;\n    }\n  }\n\n  generateSystemPrompt(modelName, context) {\n    const basePrompt = `You are an expert medical education AI assisting with geriatrics fellowship training at Shaare Zedek Medical Center in Israel.\n\nEDUCATIONAL CONSTRAINTS:\n- This is for educational purposes ONLY\n- Generate learning content, not clinical advice\n- Include appropriate medical disclaimers\n- Focus on Israeli healthcare context when relevant\n- Target geriatrics fellowship level\n\nYour role: ${this.getModelRoleDescription(modelName)}`;\n\n    const israeliContext = `\nIsraeli Healthcare Context:\n- Kupot Holim system (Clalit, Maccabi, Meuhedet, Leumit)\n- Bituach Leumi benefits and assessments\n- Hebrew language considerations\n- Cultural competency for diverse Israeli populations\n- MOH guidelines and protocols`;\n\n    return basePrompt + israeliContext;\n  }\n\n  getModelRoleDescription(modelName) {\n    const roles = {\n      claude: 'Clinical reasoning expert and ethical analysis specialist. Focus on differential diagnosis, complex case analysis, and evidence-based recommendations.',\n      openai: 'Educational content generator and case creation specialist. Excel at creating engaging learning scenarios and fellowship training materials.',\n      gemini: 'Research synthesis and data analysis expert. Provide statistical insights and integrate multiple data sources for comprehensive understanding.'\n    };\n    \n    return roles[modelName] || 'General medical education assistant';\n  }\n\n  async queryClaude(systemPrompt, userPrompt) {\n    const response = await fetch('https://api.anthropic.com/v1/messages', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'x-api-key': this.models.claude.apiKey,\n        'anthropic-version': '2023-06-01'\n      },\n      body: JSON.stringify({\n        model: this.models.claude.model,\n        max_tokens: 2000,\n        system: systemPrompt,\n        messages: [{ role: 'user', content: userPrompt }]\n      })\n    });\n\n    if (!response.ok) {\n      throw new Error(`Claude API error: ${response.status}`);\n    }\n\n    const data = await response.json();\n    return data.content[0].text;\n  }\n\n  async queryOpenAI(systemPrompt, userPrompt) {\n    const response = await fetch('https://api.openai.com/v1/chat/completions', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${this.models.openai.apiKey}`\n      },\n      body: JSON.stringify({\n        model: this.models.openai.model,\n        max_tokens: 2000,\n        temperature: 0.1,\n        messages: [\n          { role: 'system', content: systemPrompt },\n          { role: 'user', content: userPrompt }\n        ]\n      })\n    });\n\n    if (!response.ok) {\n      throw new Error(`OpenAI API error: ${response.status}`);\n    }\n\n    const data = await response.json();\n    return data.choices[0].message.content;\n  }\n\n  async queryGemini(systemPrompt, userPrompt) {\n    const response = await fetch(`https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent?key=${this.models.gemini.apiKey}`, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({\n        contents: [{\n          parts: [{ text: `${systemPrompt}\\n\\n${userPrompt}` }]\n        }],\n        generationConfig: {\n          maxOutputTokens: 2000,\n          temperature: 0.1\n        }\n      })\n    });\n\n    if (!response.ok) {\n      throw new Error(`Gemini API error: ${response.status}`);\n    }\n\n    const data = await response.json();\n    return data.candidates[0].content.parts[0].text;\n  }\n\n  async queryModels(query, modelNames, options = {}) {\n    const responses = await Promise.allSettled(\n      modelNames.map(model => this.querySpecificModel(model, query, options))\n    );\n    \n    const successful = responses\n      .filter(r => r.status === 'fulfilled')\n      .map(r => r.value);\n    \n    if (successful.length === 0) {\n      return this.generateFallbackResponse(query, 'multi_model_failure');\n    }\n    \n    return this.combineResponses(successful, options);\n  }\n\n  synthesizeEducationalResults(responses, originalQuery) {\n    const successful = responses\n      .filter(r => r.status === 'fulfilled' && !r.value.error)\n      .map(r => r.value);\n    \n    if (successful.length === 0) {\n      return {\n        content: this.generateFallbackEducationalContent(originalQuery),\n        consensus: false,\n        sources: ['Fallback'],\n        confidence: 0.3,\n        educationalDisclaimer: 'This fallback content is for educational purposes only. Consult clinical guidelines and supervisors.',\n        timestamp: new Date().toISOString()\n      };\n    }\n\n    const consensusStrength = successful.length / this.activeModels.length;\n    const hasConsensus = consensusStrength >= this.consensusThreshold;\n    \n    return {\n      content: this.synthesizeMultipleResponses(successful),\n      consensus: hasConsensus,\n      consensusStrength,\n      sources: successful.map(r => r.model),\n      confidence: this.calculateConfidence(successful),\n      individualResponses: successful.map(r => ({\n        model: r.model,\n        strengths: r.strengths,\n        excerpt: r.response.substring(0, 200) + '...'\n      })),\n      educationalDisclaimer: 'This educational content synthesizes insights from multiple AI models for fellowship training. Always validate with clinical guidelines and supervising physicians.',\n      israeliContext: true,\n      timestamp: new Date().toISOString()\n    };\n  }\n\n  synthesizeMultipleResponses(responses) {\n    if (responses.length === 1) {\n      return responses[0].response;\n    }\n\n    // Create a comprehensive synthesis\n    let synthesis = '## Comprehensive Educational Analysis\\n\\n';\n    \n    synthesis += '### Multi-AI Consensus View\\n';\n    synthesis += 'This analysis combines insights from multiple AI models to provide comprehensive educational content.\\n\\n';\n    \n    // Combine key insights from each model based on their strengths\n    responses.forEach((response, index) => {\n      const modelName = response.model.charAt(0).toUpperCase() + response.model.slice(1);\n      synthesis += `#### ${modelName} Analysis (${response.strengths.join(', ')})\\n`;\n      synthesis += response.response + '\\n\\n';\n    });\n    \n    synthesis += '### Israeli Healthcare Integration\\n';\n    synthesis += 'Consider Kupah coverage, Bituach Leumi benefits, and cultural factors in your clinical reasoning.\\n\\n';\n    \n    synthesis += '### Fellowship Learning Points\\n';\n    synthesis += '- Apply systematic geriatric assessment principles\\n';\n    synthesis += '- Integrate evidence-based practice with Israeli healthcare realities\\n';\n    synthesis += '- Consider family-centered care approaches\\n';\n    synthesis += '- Document learning for portfolio development\\n\\n';\n    \n    return synthesis;\n  }\n\n  calculateConfidence(responses) {\n    // Base confidence on number of successful responses and their consistency\n    const baseConfidence = responses.length / this.activeModels.length;\n    \n    // Adjust based on response quality indicators\n    const qualityBonus = responses.every(r => \n      r.response.length > 500 && \n      r.response.includes('educational')\n    ) ? 0.1 : 0;\n    \n    return Math.min(0.95, baseConfidence + qualityBonus);\n  }\n\n  combineResponses(responses, options) {\n    if (responses.length === 1) {\n      return {\n        content: responses[0].response,\n        source: responses[0].model,\n        strengths: responses[0].strengths,\n        confidence: 0.8\n      };\n    }\n    \n    return {\n      content: this.synthesizeMultipleResponses(responses),\n      sources: responses.map(r => r.model),\n      multiModel: true,\n      confidence: this.calculateConfidence(responses)\n    };\n  }\n\n  generateFallbackResponse(query, type) {\n    const fallbacks = {\n      'educational_comprehensive': 'Comprehensive educational framework: Apply systematic assessment, consider evidence-based guidelines, and integrate Israeli healthcare context.',\n      'multi_model_failure': 'Educational guidance: Review core geriatric principles, consult Israeli medical guidelines, and engage with fellowship supervisors.',\n      'differential_diagnosis': 'Educational approach: Systematic history, physical examination, appropriate investigations, and evidence-based differential diagnosis.',\n      'case_generation': 'Educational case framework: Patient presentation, learning objectives, clinical reasoning exercise, and evidence-based discussion.',\n      'israeli_context': 'Israeli healthcare considerations: Kupah coverage policies, Bituach Leumi benefits, cultural competency, and MOH guidelines.'\n    };\n    \n    return {\n      content: fallbacks[type] || 'Educational content not available - consult clinical resources and supervisors.',\n      fallback: true,\n      educationalDisclaimer: 'This is fallback educational content. Always consult current medical literature and clinical supervisors.'\n    };\n  }\n\n  generateFallbackEducationalContent(query) {\n    return `Educational Framework for: ${query}\n\n1. **Systematic Approach**\n   - Comprehensive geriatric assessment\n   - Evidence-based evaluation\n   - Israeli healthcare context\n\n2. **Learning Objectives**\n   - Apply clinical reasoning\n   - Integrate multiple data sources\n   - Consider patient priorities\n\n3. **Israeli Considerations**\n   - Kupah coverage and referral processes\n   - Cultural competency requirements\n   - Family involvement patterns\n\n4. **Fellowship Development**\n   - Document learning outcomes\n   - Seek supervisor feedback\n   - Build competency portfolio\n\n*Educational purposes only - consult supervisors and clinical guidelines.*`;\n  }\n\n  // Utility methods for integration\n  async generateFellowshipCase(competencyArea, israeliContext = true) {\n    const query = `Generate an advanced geriatrics fellowship case focusing on ${competencyArea} with Israeli healthcare context.`;\n    \n    return this.routeQuery(query, 'fellowship_training', {\n      fellowshipLevel: 'advanced',\n      competencyArea,\n      israeliContext\n    });\n  }\n\n  async assessCompetencyGap(userProgress, targetCompetencies) {\n    const query = `Analyze fellowship progress and recommend targeted learning for competency gaps: ${targetCompetencies.join(', ')}`;\n    \n    return this.routeQuery(query, 'competency_assessment', {\n      userProgress,\n      targetCompetencies\n    });\n  }\n\n  async generateIsraeliHealthcareScenario(scenario) {\n    const query = `Create educational scenario for Israeli healthcare system: ${scenario}`;\n    \n    return this.routeQuery(query, 'israeli_context', {\n      israeliContext: true,\n      educationalPurpose: true\n    });\n  }\n\n  // System status and health checks\n  getSystemStatus() {\n    return {\n      activeModels: this.activeModels,\n      totalModels: Object.keys(this.models).length,\n      consensusThreshold: this.consensusThreshold,\n      educationalMode: this.educationalConstraints.alwaysEducational,\n      israeliContext: this.educationalConstraints.israeliContext,\n      ready: this.activeModels.length > 0\n    };\n  }\n\n  async testConnectivity() {\n    const testQuery = 'Generate a brief educational note about geriatric assessment for testing purposes.';\n    \n    const results = await Promise.allSettled(\n      this.activeModels.map(model => \n        this.querySpecificModel(model, testQuery).then(r => ({ model, success: true }))\n      )\n    );\n    \n    const working = results\n      .filter(r => r.status === 'fulfilled')\n      .map(r => r.value.model);\n    \n    return {\n      workingModels: working,\n      totalTested: this.activeModels.length,\n      allWorking: working.length === this.activeModels.length\n    };\n  }\n}\n\n// Initialize for browser and Node.js\nif (typeof window !== 'undefined') {\n  window.MedicalAIOrchestrator = new MedicalAIOrchestrator();\n  console.log('ðŸŽ¼ Medical AI Orchestrator ready for advanced educational use');\n}\n\nif (typeof module !== 'undefined' && module.exports) {\n  module.exports = MedicalAIOrchestrator;\n}\n\nexport default MedicalAIOrchestrator;