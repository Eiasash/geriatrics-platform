# Enterprise Geriatrics Platform - Production Docker Compose
# HIPAA-compliant production deployment with high availability

version: '3.8'

services:
  # Main Application
  geriatrics-app:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    image: shaare-zedek-geriatrics:${VERSION:-latest}
    container_name: geriatrics-app-prod
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - JWT_SECRET=${JWT_SECRET}
      - ENCRYPTION_KEY=${ENCRYPTION_KEY}
      - CORS_ORIGIN=${CORS_ORIGIN}
      - RATE_LIMIT_REQUESTS=${RATE_LIMIT_REQUESTS:-100}
      - RATE_LIMIT_WINDOW=${RATE_LIMIT_WINDOW:-900000}
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - SENTRY_DSN=${SENTRY_DSN}
      - ISRAEL_TIMEZONE=Asia/Jerusalem
      - HEBREW_LOCALE=he-IL
    ports:
      - "80:3000"
      - "443:8080"
    volumes:
      - app-logs:/app/logs
      - app-uploads:/app/uploads:ro
      - app-reports:/app/reports
    networks:
      - geriatrics-network
    depends_on:
      - postgres-primary
      - redis-primary
      - elasticsearch
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      replicas: 3
      resources:
        limits:
          cpus: '2'
          memory: 4G
        reservations:
          cpus: '1'
          memory: 2G
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s

  # PostgreSQL Primary Database
  postgres-primary:
    image: postgres:15-alpine
    container_name: postgres-primary-prod
    restart: unless-stopped
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --locale=C
      - PGDATA=/var/lib/postgresql/data/pgdata
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
      - postgres-logs:/var/log/postgresql
    networks:
      - geriatrics-network
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 30s
      timeout: 5s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 4G
        reservations:
          cpus: '1'
          memory: 2G

  # PostgreSQL Read Replica
  postgres-replica:
    image: postgres:15-alpine
    container_name: postgres-replica-prod
    restart: unless-stopped
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_PRIMARY_HOST=postgres-primary
      - POSTGRES_PRIMARY_PORT=5432
    volumes:
      - postgres-replica-data:/var/lib/postgresql/data
    networks:
      - geriatrics-network
    depends_on:
      - postgres-primary
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 2G

  # Redis Primary
  redis-primary:
    image: redis:7-alpine
    container_name: redis-primary-prod
    restart: unless-stopped
    command: redis-server /usr/local/etc/redis/redis.conf
    volumes:
      - redis-data:/data
      - ./config/redis.conf:/usr/local/etc/redis/redis.conf:ro
      - redis-logs:/var/log/redis
    networks:
      - geriatrics-network
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 5s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 2G

  # Elasticsearch for Analytics
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.5.0
    container_name: elasticsearch-prod
    restart: unless-stopped
    environment:
      - node.name=es-node-01
      - cluster.name=geriatrics-cluster
      - discovery.type=single-node
      - bootstrap.memory_lock=true
      - ES_JAVA_OPTS=-Xms2g -Xmx2g
      - xpack.security.enabled=true
      - xpack.security.authc.api_key.enabled=true
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
      - elasticsearch-logs:/usr/share/elasticsearch/logs
    networks:
      - geriatrics-network
    ports:
      - "9200:9200"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 4G

  # Nginx Load Balancer
  nginx:
    image: nginx:alpine
    container_name: nginx-loadbalancer
    restart: unless-stopped
    volumes:
      - ./config/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - nginx-logs:/var/log/nginx
    ports:
      - "80:80"
      - "443:443"
    networks:
      - geriatrics-network
    depends_on:
      - geriatrics-app
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 5s
      retries: 3

  # Redis Sentinel for High Availability
  redis-sentinel:
    image: redis:7-alpine
    container_name: redis-sentinel-prod
    restart: unless-stopped
    command: redis-sentinel /usr/local/etc/redis/sentinel.conf
    volumes:
      - ./config/sentinel.conf:/usr/local/etc/redis/sentinel.conf:ro
    networks:
      - geriatrics-network
    depends_on:
      - redis-primary
    ports:
      - "26379:26379"

  # Monitoring Stack
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus-prod
    restart: unless-stopped
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    networks:
      - geriatrics-network
    ports:
      - "9090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'

  grafana:
    image: grafana/grafana:latest
    container_name: grafana-prod
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SERVER_DOMAIN=${DOMAIN}
      - GF_SMTP_ENABLED=true
      - GF_SMTP_HOST=${SMTP_HOST}
      - GF_SMTP_USER=${SMTP_USER}
      - GF_SMTP_PASSWORD=${SMTP_PASSWORD}
    volumes:
      - grafana-data:/var/lib/grafana
      - ./config/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./config/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - geriatrics-network
    ports:
      - "3001:3000"
    depends_on:
      - prometheus

  # Log Management
  fluentd:
    image: fluent/fluentd:v1.16-1
    container_name: fluentd-prod
    restart: unless-stopped
    volumes:
      - ./config/fluentd.conf:/fluentd/etc/fluentd.conf:ro
      - app-logs:/var/log/app:ro
      - nginx-logs:/var/log/nginx:ro
      - postgres-logs:/var/log/postgresql:ro
    networks:
      - geriatrics-network
    ports:
      - "24224:24224"

  # Backup Service
  backup:
    image: postgres:15-alpine
    container_name: backup-service
    restart: unless-stopped
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - BACKUP_SCHEDULE=0 2 * * *  # Daily at 2 AM
      - RETENTION_DAYS=30
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - S3_BUCKET=${S3_BACKUP_BUCKET}
    volumes:
      - ./scripts/backup.sh:/usr/local/bin/backup.sh:ro
      - backup-data:/backups
    networks:
      - geriatrics-network
    depends_on:
      - postgres-primary
    command: ["crond", "-f"]

networks:
  geriatrics-network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/geriatrics/data/postgres
  postgres-replica-data:
    driver: local
  redis-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/geriatrics/data/redis
  elasticsearch-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
  app-logs:
    driver: local
  nginx-logs:
    driver: local
  postgres-logs:
    driver: local
  redis-logs:
    driver: local
  elasticsearch-logs:
    driver: local
  app-uploads:
    driver: local
  app-reports:
    driver: local
  backup-data:
    driver: local