var p=Object.defineProperty;var u=(e,a,s)=>a in e?p(e,a,{enumerable:!0,configurable:!0,writable:!0,value:s}):e[a]=s;var n=(e,a,s)=>u(e,typeof a!="symbol"?a+"":a,s);import{c as d}from"./supabase-D23GQrQo.js";import"./react-vendor-BP9ApZiI.js";class b{constructor(){n(this,"supabase");this.supabase=d(void 0,void 0)}async initialize(){const{data:a}=await this.supabase.from("roster").select("*").limit(1);(!a||a.length===0)&&await this.seedData()}async seedData(){try{const s=await(await fetch("/packs/roster.json")).json();await this.supabase.from("roster").insert(s.patients);const r=await(await fetch("/packs/tasks.json")).json();await this.supabase.from("tasks").insert(r.tasks);const o=[{key:"abbrev_en",file:"abbreviations.en.json"},{key:"abbrev_he",file:"abbreviations.he.json"},{key:"flashcards",file:"flashcards_mmse.json"},{key:"checklist_frail",file:"checklist_frail.json"}];for(const i of o){const c=await(await fetch(`/packs/${i.file}`)).json();await this.supabase.from("packs").insert({key:i.key,data:c})}}catch(a){console.error("Failed to seed Supabase data:",a)}}async getRoster(){const{data:a,error:s}=await this.supabase.from("roster").select("*");if(s)throw s;return a||[]}async getPatient(a){const{data:s,error:t}=await this.supabase.from("roster").select("*").eq("id",a).single();return t?null:s}async updatePatient(a,s){await this.supabase.from("roster").update({...s,lastUpdated:new Date().toISOString()}).eq("id",a)}async addPatient(a){await this.supabase.from("roster").insert({...a,lastUpdated:new Date().toISOString()})}async deletePatient(a){await this.supabase.from("roster").delete().eq("id",a)}async getTasks(){const{data:a,error:s}=await this.supabase.from("tasks").select("*");if(s)throw s;return a||[]}async getTask(a){const{data:s,error:t}=await this.supabase.from("tasks").select("*").eq("id",a).single();return t?null:s}async updateTask(a,s){await this.supabase.from("tasks").update(s).eq("id",a)}async addTask(a){await this.supabase.from("tasks").insert(a)}async deleteTask(a){await this.supabase.from("tasks").delete().eq("id",a)}async addMMSEScore(a,s){const t=await this.getPatient(a);if(t){const r=t.mmse||[];r.push(s),await this.updatePatient(a,{mmse:r}),await this.supabase.from("mmse").insert({patient_id:a,date:s.date,score:s.score}).catch(()=>{})}}async savePack(a,s){await this.supabase.from("packs").upsert({key:a,data:s})}async getPack(a){const{data:s}=await this.supabase.from("packs").select("data").eq("key",a).single();return(s==null?void 0:s.data)||null}}export{b as SupabaseDataSource};
