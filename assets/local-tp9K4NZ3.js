var g=Object.defineProperty;var h=(i,t,s)=>t in i?g(i,t,{enumerable:!0,configurable:!0,writable:!0,value:s}):i[t]=s;var n=(i,t,s)=>h(i,typeof t!="symbol"?t+"":t,s);class m{constructor(){n(this,"ROSTER_KEY","geriatrics_roster");n(this,"TASKS_KEY","geriatrics_tasks");n(this,"PACKS_PREFIX","geriatrics_pack_")}async initialize(){localStorage.getItem("geriatrics_initialized")||(await this.importSeedData(),localStorage.setItem("geriatrics_initialized","true"))}async importSeedData(){try{const s=await(await fetch("/packs/roster.json")).json();localStorage.setItem(this.ROSTER_KEY,JSON.stringify(s.patients));const e=await(await fetch("/packs/tasks.json")).json();localStorage.setItem(this.TASKS_KEY,JSON.stringify(e.tasks));const o=await(await fetch("/packs/abbreviations.en.json")).json();localStorage.setItem(this.PACKS_PREFIX+"abbrev_en",JSON.stringify(o));const c=await(await fetch("/packs/abbreviations.he.json")).json();localStorage.setItem(this.PACKS_PREFIX+"abbrev_he",JSON.stringify(c));const l=await(await fetch("/packs/flashcards_mmse.json")).json();localStorage.setItem(this.PACKS_PREFIX+"flashcards",JSON.stringify(l));const S=await(await fetch("/packs/checklist_frail.json")).json();localStorage.setItem(this.PACKS_PREFIX+"checklist_frail",JSON.stringify(S))}catch(t){console.error("Failed to import seed data:",t)}}async getRoster(){const t=localStorage.getItem(this.ROSTER_KEY);return t?JSON.parse(t):[]}async getPatient(t){return(await this.getRoster()).find(a=>a.id===t)||null}async updatePatient(t,s){const a=await this.getRoster(),e=a.findIndex(r=>r.id===t);e!==-1&&(a[e]={...a[e],...s,lastUpdated:new Date().toISOString()},localStorage.setItem(this.ROSTER_KEY,JSON.stringify(a)))}async addPatient(t){const s=await this.getRoster();s.push({...t,lastUpdated:new Date().toISOString()}),localStorage.setItem(this.ROSTER_KEY,JSON.stringify(s))}async deletePatient(t){const a=(await this.getRoster()).filter(e=>e.id!==t);localStorage.setItem(this.ROSTER_KEY,JSON.stringify(a))}async getTasks(){const t=localStorage.getItem(this.TASKS_KEY);return t?JSON.parse(t):[]}async getTask(t){return(await this.getTasks()).find(a=>a.id===t)||null}async updateTask(t,s){const a=await this.getTasks(),e=a.findIndex(r=>r.id===t);e!==-1&&(a[e]={...a[e],...s},localStorage.setItem(this.TASKS_KEY,JSON.stringify(a)))}async addTask(t){const s=await this.getTasks();s.push(t),localStorage.setItem(this.TASKS_KEY,JSON.stringify(s))}async deleteTask(t){const a=(await this.getTasks()).filter(e=>e.id!==t);localStorage.setItem(this.TASKS_KEY,JSON.stringify(a))}async addMMSEScore(t,s){const a=await this.getPatient(t);a&&(a.mmse||(a.mmse=[]),a.mmse.push(s),await this.updatePatient(t,{mmse:a.mmse}))}async savePack(t,s){localStorage.setItem(this.PACKS_PREFIX+t,JSON.stringify(s))}async getPack(t){const s=localStorage.getItem(this.PACKS_PREFIX+t);return s?JSON.parse(s):null}}export{m as LocalDataSource};
